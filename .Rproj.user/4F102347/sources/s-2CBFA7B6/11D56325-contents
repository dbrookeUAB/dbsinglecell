prep_cellphonedb <- function(rds){
  require(data.table)
  require(Seurat)
  require(Matrix)
  setDTthreads(20)
  pn <- readRDS('../../Peritoneal_Niche.rds')
  require(Matrix)
  
  # exporting normalized data
  mat <- pn@assays$RNA@data[, Cells(pn)]
  
  # creating i,j,x format
  mm.sum <- summary(mat)
  
  # creating workable dataset of count data
  res <- data.table::data.table(Genes = rownames(mat)[mm.sum$i], Cell = colnames(mat)[mm.sum$j], Count = mm.sum$x)
  # create vector with values interested to use for cell_type 
  new.meta <- pn@meta.data[,'cell_subset']
  names(new.meta) <- rownames(pn@meta.data)
  
  # add cell_types to res
  res[,cell_subset:=new.meta[res$Cell]]
  setkey(res, Genes, cell_subset)
  
  # generate summary information to be used for filtering uninformative genes
  test <- res[,.(disp = var(Count)/mean(Count), N = .N), c('Genes','cell_subset')]
  test[,total:=sum(N),Genes]
  test <- test[total>500&!grepl('^mt-',Genes)&!is.na(disp)]
  
  # create vector with leftover genes
  gl <- unique(test$Genes)
  length(gl)
  
  # subset count dataset
  res <- res[Genes %in% gl]
  
  # create counts file
  counts <- dcast(res, Genes~Cell, value.var = 'Count', fill = 0)
  colnames(counts)[1] <- 'Gene'
  setkey(counts, Gene)
  
  m2h <- fread('/data/user/dbrooke/db/CellPhoneDB/data/mouse2human.csv', key = 'mouse')
  mz_genes <- m2h$Ensembl_gene_id
  names(mz_genes) <- m2h$mouse
  new_genes <- mz_genes[counts$Gene]
  names(new_genes) <- counts$Gene
  new_genes <- new_genes[!is.na(new_genes)]
  
  dim(counts)
  counts <- counts[Gene  %in% names(new_genes)]
  counts[,Gene:=new_genes[Gene]]
  
  # create meta file
  meta <- data.table(Cell = colnames(counts)[-1],cell_type =  new.meta[colnames(counts)[-1]])
  meta <- meta[Cell %in% colnames(counts)[-1]]
  fwrite(meta, 'PerNiche_int/meta.csv', quote = FALSE)
  
  fwrite(counts,'PerNiche_int/counts.csv', nThread = 20, showProgress = TRUE)  
}

sparse2DT <- function(matrix){
  require(data.table)
  require(Seurat)
  require(Matrix)
  
  require(Matrix)
  # creating i,j,x format
  mm.sum <- summary(matrix)
  
  # creating workable dataset of count data
  result <- data.table::data.table(Genes = rownames(matrix)[mm.sum$i], Cell = colnames(matrix)[mm.sum$j], Count = mm.sum$x)
return(result)
}



sparse2DT.Seurat <- function(object){
  require(data.table)
  require(Seurat)
  require(Matrix)
  
  require(Matrix)
  
  # exporting normalized data
  mat <- object@assays$RNA@data[, Cells(object)]
  
  result <- sparse2DT(mat)
  return(result)
}