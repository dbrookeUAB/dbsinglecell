library(logger)
# log_info('Starting the script...')
# log_debug('This is the second log line')
# log_trace('Note that the 2nd line is being placed right after the 1st one.')
# log_success('Doing pretty well so far!')
# log_warn('But beware, as some errors might come :/')
# log_error('This is a problem')
# log_debug('Note that getting an error is usually bad')
# log_error('This is another problem')
# log_fatal('The last problem')

log_layout(layout_glue_colors)
log_threshold(TRACE)

log_info('Start of Script.')

log_info('Creating Seurat Objects for Each Tissue')
# Creating Seurat Objects for Each Tissue ----
library(Seurat)
f <- function(y, project){
  x <- CreateSeuratObject(Read10X(y),
                          project = project)
  return(x)
}

log_trace('..... Omental Macrophages')
# Omental Macrophages
path.OmMac <- list.dirs('/rdx/db/E-MTAB/E-MTAB-8593.processed.1',
                        recursive = F)

tmp <- lapply(path.OmMac, function(x) f(x, project = 'OmMac'))
OmMac <- merge(x = tmp[[1]],
               y =  c(tmp[[2]], tmp[[3]], tmp[[4]]), 
               add.cell.ids = paste0('rep',1:4), 
               project = "OmMac")
log_trace('..... Omental Stroma')
# Omental Stroma
path.Stroma <- '/rdx/db/scRNA/GSE136636_RAW/'
Stroma <- CreateSeuratObject(counts = Read10X(path.Stroma),
                             project = 'Stroma')

log_trace('..... Peritoneal Cavity')

# Peritoneal Cavity
path.PerC <-  c("/rdx/db/scRNA/GSE121521_RAW/GSM3438655_Beclin_lysM",
                '/rdx/db/scRNA/GSE121521_RAW/GSM3438654_Beclin_flox',
                '/rdx/db/scRNA/GSE124562_RAW/GSM3536577_wt',
                '/rdx/db/scRNA/GSE124562_RAW/GSM3536578_ko'
)

PerC_series.list <- c('GSE121521','GSE124562')
PerC_sample.list <- c('GSM3438655','GSM3438654','GSM3536577','GSM3536578')

tmp <- lapply(path.PerC, function(x) f(x, project = 'PerC'))
PerC <- merge( x= tmp[[1]],
               y = tmp[-1],
               add.cell.ids = PerC_sample.list,
               project = 'PerC'
)


PerC_lengths <- sapply(tmp, ncol)

log_trace('..... Inflammatory Fibroblasts')
# Inflammatory Fibroblasts
path.fibro <- '/rdx/db/scRNA/GSE129087/'
Fibroblasts <- CreateSeuratObject(counts = Read10X(path.fibro),
                                  project = 'Fibroblasts')

log_trace('..... Inflammatory Endothelium')
# Inflammatory Endothelium
path.Endo <-  c("/rdx/db/E-MTAB/E-MTAB-7149/result/outs/filtered_feature_bc_matrix/")
Endothelium <- CreateSeuratObject(counts = Read10X(path.Endo),
                                  project = 'Endothelium')

log_trace('..... Stromal Vascular Cells from adipose tissue')
# Stromal Vascular Cells from adipose tissue
path.SVC <-  c("/rdx/db/scRNA/GSE128890_RAW/GSM3717977_SCmurinep12/",
               '/rdx/db/scRNA/GSE128890_RAW/GSM3717978_SCmurineAdult/',
               '/rdx/db/scRNA/E-MTAB-6677/data/'
)

SVC_series.list <- c('GSE128890','E.MTAB.6677')
SVC_sample.list <- c('GSM3717977','GSM3717978','E-MTAB-6677')




tmp <- lapply(path.SVC, function(x) f(x, project = 'SVC'))
SVC <- merge( x= tmp[[1]],
              y = tmp[-1],
              add.cell.ids = SVC_sample.list,
              project = 'SVC'
)


SVC_lengths <- sapply(tmp, ncol)

log_success('Created Seurat Objects')

log_info('Merging all into one dataset')
# Merge into One Dataset ----

PerNiche <- merge(
  x = OmMac,
  y = c(Stroma, PerC, Endothelium, Fibroblasts,SVC),
  add.cell.ids = c('OmMac', 'Stroma', 'PerC', 'Endothelium','Stroma','SVC'),
  project = 'PerNiche'
)

log_success('PerNiche object created')

log_info('Adding Meta data')
# Add Meta-data ----
PerNiche@meta.data$tissue <- c(
  rep('Omentum', ncol(OmMac)+ncol(Stroma)),
  rep('Peritoneal Cavity', ncol(PerC)),
  rep('Aorta Endothelium', ncol(Endothelium)),
  rep('Synovial Stroma', ncol(Fibroblasts)),
  rep('Stromal Vascular Cells', ncol(SVC))
)

PerNiche@meta.data$type <- c(
  rep('Macrophage', ncol(OmMac)),
  rep('Stromal', ncol(Stroma)),
  rep('PerC-Cell', ncol(PerC)),
  rep('Endothlium', ncol(Endothelium)),
  rep('Stromal', ncol(Fibroblasts)),
  rep('SVC', ncol(SVC))
)


PerNiche@meta.data$dataset <- c(
  rep('E.MTAB.8593', ncol(OmMac)),
  rep('GSE136636', ncol(Stroma)),
  unlist(mapply(rep, PerC_series.list, c(sum(PerC_lengths[1:2]), sum(PerC_lengths[3:4])))),
  rep('E.MTAB.7149', ncol(Endothelium)),
  rep('GSE129087', ncol(Fibroblasts)),
  unlist(mapply(rep, SVC_series.list, c(sum(SVC_lengths[1:2]), sum(SVC_lengths[3]))))
)


# Cleanup ----
rm(list = c('OmMac','Stroma','PerC', 'Endothelium','Fibroblasts',
            'path.PerC','path.OmMac','path.Stroma','path.fibro','path.Endo',
            'tmp', 'SVC','path.SVC' ))


log_info('Seurat Preprocessing')
# Seurat Preprocessing ----


PerNiche <- PercentageFeatureSet(PerNiche,
                                 pattern = "^mt-",
                                 col.name = "percent.mt")

PerNiche <- PercentageFeatureSet(PerNiche,
                                 pattern = "^Rp[sl]",
                                 col.name = "percent.ribo")


low <- 200
high <- 5700
ribo <- 3.5
mito <- 20

library(data.table)

tc <- length(Cells(PerNiche))

#start with cells with many genes detected.
high.det <- WhichCells(PerNiche, expression = nFeature_RNA < high)

#start with cells with many genes detected.
low.det<- WhichCells(PerNiche, expression = nFeature_RNA > low )

# Mito/Ribo filtering
selected.mt <- WhichCells(PerNiche, expression = percent.mt < mito)
selected.ribo <- WhichCells(PerNiche, expression = percent.ribo  > ribo)

log_trace('..... removing high expressing cells')
# remove these cells
PerNiche  <- subset(PerNiche,
                    cells=high.det)

log_trace('..... removing low expressing low')
# remove these cells
PerNiche <- subset(PerNiche, 
                   cells=low.det)

log_trace('.....removing cells with >20% MT genes')
# and subset the object to only keep those cells
PerNiche <- subset(PerNiche, cells = selected.mt)

log_trace('.....removing cells with <3.5% Rp genes')
PerNiche <- subset(PerNiche, cells = selected.ribo)

log_success('Finished Filtering')

log_info('Normalization')

# Normalization ----
PerNiche <- NormalizeData(
  PerNiche,
  verbose = TRUE
) 

log_success('')

log_info('Finding 4000 Variable Features')
# Variable Features ----
PerNiche <- FindVariableFeatures(
  PerNiche,
  selection.method = "vst",
  nfeatures = 4000
)

log_success('')

log_info('Determining Cell Cycle Score')

ccss <- stringr::str_to_title(cc.genes.updated.2019$s.genes)
ccg2m <- stringr::str_to_title(cc.genes.updated.2019$g2m.genes)

PerNiche <- CellCycleScoring(PerNiche,
                             s.features = ccss,
                             g2m.features = ccg2m)

PerNiche$CC.Difference <- PerNiche$S.Score - PerNiche$G2m.Score

log_info('Scaling Data')
# Scaling Data ----
PerNiche <- ScaleData(
  PerNiche, 
  vars.to.regress = 'CC.Difference',
  verbose = TRUE
)

log_success('')

log_info('Performing PCA using 100npcs')
# PCA ----
PerNiche <- RunPCA(
  PerNiche,
  pc.genes = PerNiche@var.genes,
  npcs = 100,
  verbose = TRUE
)

log_success('')

log_info('Harmonizing datasets')
# Harmonizing the Integrated Datasets ----

library(harmony)

PerNiche <- RunHarmony(
  PerNiche,group.by.vars = 'dataset',
  # sigma = 0.1,                          # width of soft kmeans clusters,
  # theta = 8,                            # encourages diverse clusters
  nclust = 50,                          # number of clusters in model,
  max.iter.cluster = 100,
  max.iter.harmony = 100
)

log_success('')

log_info('Dimensional Reduction Post-Harmonizing')
# Dimensional Reduction Post-Harmonizing  ----

log_trace('.......UMAP')
# UMAP 
PerNiche <-  RunUMAP(PerNiche,
                     reduction = "harmony",
                     dims = 1:100)


log_trace('.......TSNE')

#t-SNE (currently using FIt-SNE Method)
# PerNiche <-  RunTSNE(PerNiche, reduction = "harmony", dims = 1:20, tsne.method = "fftRtsne")
learningRate <- dim(PerNiche)[2]/12
Perplexity <- dim(PerNiche)[2]/100

createINITmatrix <- function(x, reduction = 'pca', dims = 1:2){
  res <- as.matrix(Seurat::Embeddings(x, reduction = reduction))[,dims]
  res <- (res/sd(res[,1]))*0.0001
  return(res)
}

init.mat <- createINITmatrix(PerNiche, reduction = 'harmony',dims = 1:100)

PerNiche <-  RunTSNE(PerNiche,
                     reduction = "harmony",
                     dims = 1:100,
                     tsne.method = "FIt-SNE",
                     fast_tsne_path = '/rdx/software/FIt-SNE-1.1.0/bin/fast_tsne',
                     perplexity = Perplexity,
                     learning_rate = learningRate,
                     k = 10,
                     late_exag_coeff = 4,
                     initialization = init.mat
)

log_success('Finished with dimension reduction')

log_warn('Saving current results to tmpPerniche.rds')
saveRDS(PerNiche,'tmpPerniche.rds')
log_success('')

log_info('Finding Neighbors')
# Finding Neighbors ----
PerNiche <-  FindNeighbors(PerNiche,
                           nn.method = 'annoy',
                           reduction = "harmony",
                           annoy.metric = 'cosine',
                           force.recalc = TRUE,
                           dims = 1:100)

log_info('Finding Clusters')
# Finding Clusters ----
PerNiche <-  FindClusters(PerNiche,
                          algorithm = 3,
                          resolution = 1,
                          method = 'igraph',
                          n.start = 30,
                          n.iter = 100,
                          verbose = TRUE
                          )

PerNiche <-  identity(PerNiche)

png('~/Desktop/PerNiche-umap.png', height = 10, width = 10, res = 300, units = 'in')
DimPlot(PerNiche, reduction = 'umap', repel = TRUE, label = TRUE, order = TRUE)+NoLegend()
dev.off()

png('~/Desktop/PerNiche-tsne.png', height = 10, width = 10, res = 300, units = 'in')
DimPlot(PerNiche, reduction = 'tsne', repel = TRUE,label = TRUE, order = TRUE)+NoLegend()
dev.off()

log_info('Indentifying Cluster Markers')
# Identifying Cluster Markers ---

cluster.markers <- FindAllMarkers(
  PerNiche,
  logfc.threshold = 0.5,
  verbose = TRUE
)

library(data.table)
setDT(cluster.markers)
feat_cols <- c('lightgrey',viridis::plasma(5)) # best color palette for FeaturePlot

log_info('Saving Results as .rds file')
# Saving Results as .rds file ----
saveRDS(list(PerNiche = PerNiche, markers = cluster.markers, feat_cols = feat_cols), '/rdx/projects/QE/data/20200519_PerNiche_01.rds')

log_success('Enjoy your spoils')
